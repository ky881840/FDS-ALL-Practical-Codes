#include <iostream>
#include <string>
using namespace std;
class Node {
public:
    int data;       
    Node* next;     
    Node* prev;     

    Node(int val) : data(val), next(nullptr), prev(nullptr) {}
};

class DoublyLinkedList {
private:
    Node* head;
    Node* tail;

public:
    DoublyLinkedList() : head(nullptr), tail(nullptr) {}


    void append(int val) {
        Node* newNode = new Node(val);
        if (!head) {
            head = newNode;
            tail = newNode;
        } else {
            tail->next = newNode;
            newNode->prev = tail;
            tail = newNode;
        }
    }

    void display() {
        Node* current = head;
        while (current) {
            std::cout << current->data;
            current = current->next;
        }
        std::cout << std::endl;
    }

    DoublyLinkedList onesComplement() {
        DoublyLinkedList result;
        Node* current = head;
        while (current) {
            result.append(current->data == 0 ? 1 : 0); 
            current = current->next;
        }
        return result;
    }

    DoublyLinkedList twosComplement() {

        DoublyLinkedList onesComp = onesComplement();
        
        return addBinary(onesComp,0);
    }

    DoublyLinkedList addBinary(DoublyLinkedList& other, int carry = 0) {
        DoublyLinkedList result;
        Node* current1 = this->tail;
        Node* current2 = other.tail;

        while (current1 || current2 || carry) {
            int sum = carry;
            if (current1) {
                sum += current1->data;
                current1 = current1->prev;
            }
            if (current2) {
                sum += current2->data;
                current2 = current2->prev;
            }

            result.append(sum % 2);
            carry = sum / 2; 
        }


        return reverse(result);
    }


    DoublyLinkedList reverse(DoublyLinkedList& list) {
        DoublyLinkedList reversed;
        Node* current = list.tail; 
        while (current) {
            reversed.append(current->data);
            current = current->prev;
        }
        return reversed;
    }

    ~DoublyLinkedList() {
        Node* current = head;
        while (current) {
            Node* nextNode = current->next;
            delete current;
            current = nextNode;
        }
    }
};

int main() {
    DoublyLinkedList bin1, bin2;

    
    string input;
    cout << "Enter first binary number: ";
    cin >> input;
    for (char c : input) {
        bin1.append(c - '0'); 
    }


    cout << "Enter second binary number: ";
    cin >> input;
    cout<<endl;
    for (char c : input) {
        bin2.append(c - '0'); 
    }

    cout << "First Binary Number: ";
    bin1.display();
    cout << "Second Binary Number: ";
    bin2.display();
    cout<<endl;

    cout <<"Complement of First Number: "<<endl;
    cout << "1's Complement of First Number: ";
    bin1.onesComplement().display();

    cout << "2's Complement of First Number: ";
    bin1.twosComplement().display();
    cout<<endl;
    
    cout <<"Complement of Second Number: "<<endl;
    cout << "1's Complement of Second Number: ";
    bin2.onesComplement().display();
    
    cout << "2's Complement of Second Number: ";
    bin2.twosComplement().display();
    cout<<endl;

    cout << "Sum of Both Binary Numbers: ";
    DoublyLinkedList sum = bin1.addBinary(bin2);
    sum.display();

    return 0;
}

